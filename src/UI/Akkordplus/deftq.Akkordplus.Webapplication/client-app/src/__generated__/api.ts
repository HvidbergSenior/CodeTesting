/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/projects/{projectId}/logbook/weeks/close": {
    /** Close week in the log book */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CloseProjectLogBookWeekRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/config": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ConfigResponse"];
            "application/json": components["schemas"]["ConfigResponse"];
            "text/json": components["schemas"]["ConfigResponse"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{sourceFolderId}/copy": {
    /** Copy folder to a new location in the project */
    put: {
      parameters: {
        path: {
          projectId: string;
          sourceFolderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CopyProjectFolderRequest"];
        };
      };
      responses: {
        /** @description The folder was copied */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project, source folder or destination folder not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{sourceFolderId}/workitems/copy": {
    /** Copy work items from source folder to destination folder */
    post: {
      parameters: {
        path: {
          projectId: string;
          sourceFolderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CopyWorkItemsRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/extraworkagreements": {
    /** Create a new extrawork agreement */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateExtraWorkAgreementRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Remove extra work agreements from project */
    delete: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RemoveExtraWorkAgreementRequest"];
        };
      };
      responses: {
        /** @description The extra work agreement was removed */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project or extra work agreement not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects": {
    /** Get all projects */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectsResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new project */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateProjectRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders": {
    /** Get all folders for a project */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectFolderRootQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new folder in a project */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateProjectFolderRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/compensations/participants": {
    /** Get the participants on the project, with there hours and compensation payment in a period */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GetCompensationPaymentParticipantsInPeriodRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetCompensationPaymentResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/documents/{documentId}": {
    /** Get document */
    get: {
      parameters: {
        path: {
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/extraworkagreements/rates": {
    /** Gets extra work agreement rates */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetExtraWorkAgreementRatesQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update extra work agreement rates */
    put: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateExtraWorkAgreementRatesRequest"];
        };
      };
      responses: {
        /** @description The extra work agreement rates have been updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User is not project owner */
        403: never;
        /** @description Project not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/extraworkgreements": {
    /** Get the list of extra work agreements for the project */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ExtraWorkAgreementsResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/workitems/grouped": {
    /** Get all work items in current and sub folders grouped together by id */
    get: {
      parameters: {
        query?: {
          maxHits?: number;
        };
        path: {
          projectId: string;
          folderId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetGroupedWorkItemsQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Project, source folder, sub folders or work items not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/reports/logbookspreadsheet": {
    /** Get logbook in a spreadsheet */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/catalog/materials/{materialId}": {
    /** Get detailed material information */
    get: {
      parameters: {
        path: {
          materialId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetMaterialResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}": {
    /** Get project by id */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Remove a project */
    delete: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description The project was removed */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/favorites": {
    /** Get the list of favorites on the project */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectFavoriteListQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Register a new material or operation af favorite on a project */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RegisterProjectCatalogFavoriteRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Remove favorites from project */
    delete: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RemoveProjectFavoritesRequest"];
        };
      };
      responses: {
        /** @description The favorite was removed */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Favorite not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/compensations": {
    /** Get the list of favorites on the project */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectCompensationListQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Register a compensation on a project */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RegisterCompensationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Register one or more compensations from a project */
    delete: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RemoveCompensationPaymentsRequest"];
        };
      };
      responses: {
        /** @description The compensations were removed */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not authorized to remove compensations */
        403: never;
        /** @description Compensation not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/summation": {
    /** Get summation of all work items in folder (including subfolders) */
    get: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectFolderSummationQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/reports/projectinfo": {
    /** Get data for the project info report */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectInfoReportResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/logbook": {
    /** Get the log book for a project */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectLogBookQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/logbook/{userId}/weeks/{year}/{week}": {
    /** Get a specific week from the project log book */
    get: {
      parameters: {
        path: {
          projectId: string;
          userId: string;
          year: number;
          week: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectLogBookWeekQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/logbook/{userId}/weeks/{year}/{month}/{day}": {
    /** Get a specific week from the project log book */
    get: {
      parameters: {
        path: {
          projectId: string;
          userId: string;
          year: number;
          month: number;
          day: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectLogBookWeekQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/projectspecificoperation": {
    /** Get the list of project specific operations on the project */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectSpecificOperationsListResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new projects specific operation */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RegisterProjectSpecificOperationRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Remove projects specific operations from project */
    delete: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RemoveProjectSpecificOperationsRequest"];
        };
      };
      responses: {
        /** @description The project specific operations was removed */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description project specific operation not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/summation": {
    /** Get summation for project */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectSummationQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/users": {
    /** Get users for project */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetProjectUsersQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Register a new participant on the project */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RegisterProjectUserRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/reports/statusreportspreatsheet": {
    /** Get status report in a spreadsheet */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/catalog/supplements": {
    /** Get list of available supplements */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetSupplementsResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/workitems/material/preview": {
    /** Preview expected work time for a material work item in a folder */
    post: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GetWorkItemMaterialPreviewRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetWorkItemMaterialPreviewQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/workitems/operation/preview": {
    /** Preview expected work time for an operation work item in a folder */
    post: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GetWorkItemOperationPreviewRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetWorkItemOperationPreviewQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/workitems": {
    /** Get all work items registered in folder */
    get: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GetWorkItemsQueryResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Remove work items from folder */
    delete: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RemoveWorkItemRequest"];
        };
      };
      responses: {
        /** @description The work item was removed */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project, folder or work item not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/reports/workitemsspreadsheet": {
    /** Get all work items in a spreadsheet */
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/move": {
    /** Move folder to a new location in the project */
    put: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["MoveProjectFolderRequest"];
        };
      };
      responses: {
        /** @description The folder was moved */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project, source folder or destination folder not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/workitems/move": {
    /** Work items that are moved to a new location in the project */
    put: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["MoveWorkItemsRequest"];
        };
      };
      responses: {
        /** @description The work items are moved */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project, work items, source folder or destination folder not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/logbook/weeks/open": {
    /** Open previously closed week in the log book */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["OpenProjectLogBookWeekRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/ping": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/projects/{projectId}/logbook/salaryadvance": {
    /** Register salary advance for user */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RegisterLogbookSalaryAdvanceRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/logbook/weeks": {
    /** Register a new log book week */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RegisterProjectLogBookWeekRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/workitems/material": {
    /** Register a new material work item in a folder */
    post: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RegisterWorkItemMaterialRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/workitems/operation": {
    /** Register a new operation work item in a folder */
    post: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RegisterWorkItemOperationRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/documents/{documentId}": {
    /** Remove document */
    delete: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
          documentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}": {
    /** Remove folder from the project */
    delete: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      responses: {
        /** @description The folder was removed */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project or folder not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/catalog/materials/search": {
    /** Search materials catalog */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SearchMaterialsRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SearchMaterialResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/catalog/operations/search": {
    /** Search operations catalog */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["SearchOperationsRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SearchOperationResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/baserate": {
    /** Update base rate regulation for a folder */
    put: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateBaseRateRequest"];
        };
      };
      responses: {
        /** @description The folder base rate was updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User is not project owner */
        403: never;
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/basesupplements": {
    /** Update base supplements for a folder */
    put: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateBaseSupplementsRequest"];
        };
      };
      responses: {
        /** @description The folder base supplements were updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/supplements": {
    /** update folder supplements */
    post: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateFolderSupplementsRequest"];
        };
      };
      responses: {
        /** @description The folder supplements was updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project or folder not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/lock": {
    /** Lock or unlock folder */
    post: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateLockProjectFolderRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/setup/projectcompany": {
    /** Update piecework Company, Workplace, CVR and P number */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateProjectCompanyRequest"];
        };
      };
      responses: {
        /** @description The piecework company, workplace, CVR and P Number was updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/extraworkagreements/{extraWorkAgreementId}": {
    /** Update a specific extra work agreement */
    put: {
      parameters: {
        path: {
          projectId: string;
          extraWorkAgreementId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateProjectExtraWorkAgreementsRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/description": {
    /** Edit folder description */
    put: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateProjectFolderDescriptionRequest"];
        };
      };
      responses: {
        /** @description The folder description was edited */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project or folder not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/extrawork": {
    /** Mark a folder as extra work or normal work */
    post: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateProjectFolderExtraWorkRequest"];
        };
      };
      responses: {
        /** @description Folder extra work is updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner or project manager */
        403: never;
        /** @description Folder not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/name": {
    /** Edit folder name */
    put: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateProjectFolderNameRequest"];
        };
      };
      responses: {
        /** @description The folder name was edited */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project or folder not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/projectinformation": {
    /** Update piecework name, description and order nr. */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateProjectInformationRequest"];
        };
      };
      responses: {
        /** @description The piecework name was updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/projectlumpsum": {
    /** Edit project lump sum */
    put: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateProjectLumpSumRequest"];
        };
      };
      responses: {
        /** @description The project lump sum has been updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User is not authorized */
        401: never;
        /** @description User is not project owner */
        403: never;
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/projectspecificoperation/{projectSpecificOperationId}": {
    /** Create a new projects specific operation */
    post: {
      parameters: {
        path: {
          projectId: string;
          projectSpecificOperationId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateProjectSpecificOperationRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/setup/projecttype": {
    /** Update piecework type */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateProjectTypeRequest"];
        };
      };
      responses: {
        /** @description The piecework type was updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/workItems/{workItemId}": {
    /** Update work item */
    put: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
          workItemId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateWorkItemRequest"];
        };
      };
      responses: {
        /** @description The work item was updated */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description User not project owner */
        403: never;
        /** @description Project, folder og work item not found */
        404: never;
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/documents": {
    /** Upload document to project */
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            ContentType?: string;
            ContentDisposition?: string;
            Headers?: {
              [key: string]: (string)[] | undefined;
            };
            /** Format: int64 */
            Length?: number;
            Name?: string;
            FileName?: string;
          };
          "application/json": {
            ContentType?: string;
            ContentDisposition?: string;
            Headers?: {
              [key: string]: (string)[] | undefined;
            };
            /** Format: int64 */
            Length?: number;
            Name?: string;
            FileName?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/api/projects/{projectId}/folders/{folderId}/documents": {
    /** Upload document to project in specific folder */
    post: {
      parameters: {
        path: {
          projectId: string;
          folderId: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            ContentType?: string;
            ContentDisposition?: string;
            Headers?: {
              [key: string]: (string)[] | undefined;
            };
            /** Format: int64 */
            Length?: number;
            Name?: string;
            FileName?: string;
          };
          "application/json": {
            ContentType?: string;
            ContentDisposition?: string;
            Headers?: {
              [key: string]: (string)[] | undefined;
            };
            /** Format: int64 */
            Length?: number;
            Name?: string;
            FileName?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: never;
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AzureAdB2C: {
      clientId?: string | null;
      authority?: string | null;
      knownAuthority?: string | null;
    };
    BaseRateAndSupplementsResponse: {
      indirectTimeSupplementPercentage?: components["schemas"]["BaseRateAndSupplementsValueResponse"];
      siteSpecificTimeSupplementPercentage?: components["schemas"]["BaseRateAndSupplementsValueResponse"];
      baseRateRegulationPercentage?: components["schemas"]["BaseRateAndSupplementsValueResponse"];
      /** Format: double */
      combinedSupplementPercentage?: number;
      /** Format: double */
      baseRatePerMinDkr?: number;
      /** Format: double */
      personalTimeSupplementPercentage?: number;
    };
    BaseRateAndSupplementsValueResponse: {
      valueStatus?: components["schemas"]["BaseRateAndSupplementsValueStatus"];
      /** Format: double */
      value?: number;
    };
    /** @enum {string} */
    BaseRateAndSupplementsValueStatus: "Inherit" | "Overwrite";
    /** @enum {string} */
    BaseRateStatusUpdate: "Inherit" | "Overwrite";
    BaseRateUpdate: {
      /** Format: double */
      value?: number;
      status?: components["schemas"]["BaseRateStatusUpdate"];
    };
    /** @enum {string} */
    BaseSupplementStatusUpdate: "Inherit" | "Overwrite";
    BaseSupplementUpdate: {
      /** Format: double */
      value?: number;
      status?: components["schemas"]["BaseSupplementStatusUpdate"];
    };
    /** @enum {string} */
    CatalogItemType: "Material" | "Operation";
    CloseProjectLogBookWeekRequest: {
      /** Format: uuid */
      userId?: string;
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      week?: number;
    };
    CompensationResponse: {
      /** Format: uuid */
      projectCompensationId?: string;
      startDate?: string;
      endDate?: string;
      /** Format: double */
      compensationPaymentDkr?: number;
      compensationParticipant?: (components["schemas"]["ProjectCompensationParticipant"])[] | null;
    };
    ConfigResponse: {
      azureAdB2C?: components["schemas"]["AzureAdB2C"];
      featureFlags?: components["schemas"]["FeatureFlags"];
      /** Format: int32 */
      maxUploadFileSizeMB?: number;
    };
    CopyProjectFolderRequest: {
      /**
       * Format: uuid 
       * @description The destination folder, use '11111111-1111-1111-1111-111111111111' for root folder.
       */
      destinationFolderId?: string;
    };
    CopyWorkItemsRequest: {
      /** Format: uuid */
      destinationFolderId?: string;
      workItemIds?: (string)[] | null;
    };
    CreateExtraWorkAgreementRequest: {
      extraWorkAgreementNumber?: string | null;
      name?: string | null;
      description?: string | null;
      extraWorkAgreementType?: components["schemas"]["ExtraWorkAgreementTypeRequest"];
      /** Format: double */
      paymentDkr?: number | null;
      workTime?: components["schemas"]["CreateExtraWorkAgreementWorkTime"];
    };
    CreateExtraWorkAgreementWorkTime: {
      /** Format: int32 */
      hours?: number;
      /** Format: int32 */
      minutes?: number;
    };
    CreateProjectFolderRequest: {
      folderName?: string | null;
      folderDescription?: string | null;
      /** Format: uuid */
      parentFolderId?: string | null;
    };
    CreateProjectRequest: {
      title?: string | null;
      description?: string | null;
      pieceworkType?: components["schemas"]["PieceworkType"];
      /** Format: double */
      pieceworkSum?: number | null;
    };
    DocumentReferenceResponse: {
      /** Format: uuid */
      documentId?: string;
      name?: string | null;
      /** Format: date-time */
      uploadedTimestamp?: string;
    };
    Error: {
      type?: string | null;
      title?: string | null;
      detail?: string | null;
      instance?: string | null;
      /** Format: int32 */
      status?: number;
      traceId?: string | null;
    };
    ErrorDetail: {
      code?: string | null;
      field?: string | null;
      attemptedValue?: Record<string, unknown> | null;
      message?: string | null;
    };
    /** @enum {string} */
    ExtraWork: "ExtraWork" | "NormalWork";
    ExtraWorkAgreementResponse: {
      /** Format: uuid */
      extraWorkAgreementId?: string;
      extraWorkAgreementNumber?: string | null;
      name?: string | null;
      description?: string | null;
      extraWorkAgreementType?: components["schemas"]["ExtraWorkAgreementTypeResponse"];
      /** Format: double */
      paymentDkr?: number | null;
      workTime?: components["schemas"]["ExtraWorkAgreementWorkTime"];
    };
    /** @enum {string} */
    ExtraWorkAgreementTypeRequest: "CustomerHours" | "CompanyHours" | "AgreedPayment" | "Other";
    /** @enum {string} */
    ExtraWorkAgreementTypeResponse: "CustomerHours" | "CompanyHours" | "AgreedPayment" | "Other";
    ExtraWorkAgreementWorkTime: {
      /** Format: int32 */
      hours?: number;
      /** Format: int32 */
      minutes?: number;
    };
    ExtraWorkAgreementsResponse: {
      /** Format: double */
      totalPaymentDkr?: number;
      extraWorkAgreements?: (components["schemas"]["ExtraWorkAgreementResponse"])[] | null;
    };
    /** @enum {string} */
    ExtraWorkUpdate: "ExtraWork" | "NormalWork";
    /** @enum {string} */
    FavoriteCatalogType: "Material" | "Operation";
    FavoritesResponse: {
      /** Format: uuid */
      favoriteItemId?: string;
      /** Format: uuid */
      catalogId?: string;
      text?: string | null;
      number?: string | null;
      unit?: string | null;
      catalogType?: components["schemas"]["CatalogItemType"];
    };
    FeatureFlags: Record<string, never>;
    FolderSupplementResponse: {
      /** Format: uuid */
      supplementId?: string;
      supplementNumber?: string | null;
      supplementText?: string | null;
    };
    FoundMaterial: {
      /** Format: uuid */
      id?: string;
      eanNumber?: string | null;
      name?: string | null;
      unit?: string | null;
    };
    FoundOperation: {
      /** Format: uuid */
      operationId?: string;
      operationNumber?: string | null;
      operationText?: string | null;
    };
    GetCompensationPaymentParticipantResponse: {
      /** Format: uuid */
      projectParticipantId?: string;
      name?: string | null;
      email?: string | null;
      /** Format: double */
      hours?: number;
      /** Format: double */
      payment?: number;
    };
    GetCompensationPaymentParticipantsInPeriodRequest: {
      startDate?: string;
      endDate?: string;
      /** Format: double */
      amount?: number;
    };
    GetCompensationPaymentResponse: {
      startDate?: string;
      endDate?: string;
      participants?: (components["schemas"]["GetCompensationPaymentParticipantResponse"])[] | null;
    };
    GetExtraWorkAgreementRatesQueryResponse: {
      /** Format: double */
      customerRatePerHourDkr?: number;
      /** Format: double */
      companyRatePerHourDkr?: number;
    };
    GetGroupedWorkItemsQueryResponse: {
      groupedWorkItems?: (components["schemas"]["GroupedWorkItemsResponse"])[] | null;
    };
    GetMaterialResponse: {
      /** Format: uuid */
      id?: string;
      eanNumber?: string | null;
      name?: string | null;
      unit?: string | null;
      mountings?: (components["schemas"]["MaterialMountingResponse"])[] | null;
    };
    GetProjectCompensationListQueryResponse: {
      compensations?: (components["schemas"]["CompensationResponse"])[] | null;
    };
    GetProjectFavoriteListQueryResponse: {
      favorites?: (components["schemas"]["FavoritesResponse"])[] | null;
    };
    GetProjectFolderRootQueryResponse: {
      /** Format: uuid */
      projectId?: string;
      rootFolder?: components["schemas"]["ProjectFolderResponse"];
    };
    GetProjectFolderSummationQueryResponse: {
      /** Format: double */
      totalWorkTimeMilliseconds?: number;
      /** Format: double */
      totalPaymentDkr?: number;
      /** Format: double */
      totalExtraWorkTimeMilliseconds?: number;
      /** Format: double */
      totalExtraPaymentDkr?: number;
    };
    GetProjectInfoReportResponse: {
      project?: components["schemas"]["GetProjectResponse"];
      rootFolder?: components["schemas"]["ProjectFolderResponse"];
      extraWorkAgreementsRates?: components["schemas"]["GetExtraWorkAgreementRatesQueryResponse"];
      projectSummation?: components["schemas"]["GetProjectSummationQueryResponse"];
      users?: (components["schemas"]["ProjectUserResponse"])[] | null;
      groupedWorkitems?: (components["schemas"]["GroupedWorkItemsResponse"])[] | null;
    };
    GetProjectLogBookDayResponse: {
      /** Format: date-time */
      date?: string;
      time?: components["schemas"]["LogBookTimeResponse"];
    };
    GetProjectLogBookQueryResponse: {
      /** Format: uuid */
      projectId?: string;
      users?: (components["schemas"]["LogBookUserResponse"])[] | null;
    };
    GetProjectLogBookWeekQueryResponse: {
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      week?: number;
      userName?: string | null;
      note?: string | null;
      closed?: boolean;
      weekSummation?: components["schemas"]["LogBookTimeResponse"];
      closedWeeksSummation?: components["schemas"]["LogBookTimeResponse"];
      days?: (components["schemas"]["GetProjectLogBookDayResponse"])[] | null;
      salaryAdvance?: components["schemas"]["LogBookSalaryAdvanceResponse"];
    };
    GetProjectResponse: {
      /** Format: uuid */
      id?: string;
      title?: string | null;
      /** Format: int64 */
      projectNumber?: number;
      pieceWorkNumber?: string | null;
      orderNumber?: string | null;
      description?: string | null;
      pieceworkType?: components["schemas"]["PieceworkType"];
      /** Format: double */
      lumpSumPaymentDkr?: number | null;
      startDate?: string | null;
      endDate?: string | null;
      /** Format: date-time */
      projectCreatedTime?: string;
      companyName?: string | null;
      companyAddress?: string | null;
      companyCvrNo?: string | null;
      companyPNo?: string | null;
      participants?: (components["schemas"]["ProjectParticipant"])[] | null;
      currentUserRole?: components["schemas"]["ProjectRole"];
    };
    GetProjectSpecificOperationResponse: {
      /** Format: uuid */
      projectSpecificOperationId?: string;
      extraWorkAgreementNumber?: string | null;
      name?: string | null;
      description?: string | null;
      /** Format: double */
      operationTimeMs?: number;
      /** Format: double */
      workingTimeMs?: number;
      /** Format: double */
      payment?: number;
    };
    GetProjectSpecificOperationsListResponse: {
      projectSpecificOperations?: (components["schemas"]["GetProjectSpecificOperationResponse"])[] | null;
    };
    GetProjectSummationQueryResponse: {
      /** Format: double */
      totalWorkItemPaymentDkr?: number;
      /** Format: double */
      totalWorkItemExtraWorkPaymentDkr?: number;
      /** Format: double */
      totalExtraWorkAgreementDkr?: number;
      /** Format: double */
      totalLogBookHours?: number;
      /** Format: double */
      totalPaymentDkr?: number;
      /** Format: double */
      totalLumpSumDkr?: number;
      /** Format: double */
      totalCalculationSumDkr?: number;
    };
    GetProjectUsersQueryResponse: {
      users?: (components["schemas"]["ProjectUserResponse"])[] | null;
    };
    GetProjectsResponse: {
      projects?: (components["schemas"]["ProjectResponse"])[] | null;
    };
    GetSupplementsResponse: {
      supplements?: (components["schemas"]["SupplementResponse"])[] | null;
    };
    GetWorkItemMaterialPreviewQueryResponse: {
      /** Format: double */
      operationTimeMilliseconds?: number;
      /** Format: double */
      totalWorkTimeMilliseconds?: number;
      /** Format: double */
      workItemTotalPaymentDkr?: number;
    };
    GetWorkItemMaterialPreviewRequest: {
      /** Format: uuid */
      materialId?: string;
      /** Format: double */
      workItemAmount?: number;
      /** Format: int32 */
      workItemMountingCode?: number;
      supplementOperations?: (components["schemas"]["GetWorkItemMaterialPreviewSupplementOperationRequest"])[] | null;
      supplements?: (components["schemas"]["GetWorkItemMaterialPreviewSupplementRequest"])[] | null;
    };
    GetWorkItemMaterialPreviewSupplementOperationRequest: {
      /** Format: uuid */
      supplementOperationId?: string;
      /** Format: double */
      amount?: number;
    };
    GetWorkItemMaterialPreviewSupplementRequest: {
      /** Format: uuid */
      supplementId?: string;
    };
    GetWorkItemOperationPreviewQueryResponse: {
      /** Format: double */
      operationTimeMilliseconds?: number;
      /** Format: double */
      totalWorkTimeMilliseconds?: number;
      /** Format: double */
      workItemTotalPaymentDkr?: number;
    };
    GetWorkItemOperationPreviewRequest: {
      /** Format: uuid */
      operationId?: string;
      /** Format: double */
      workItemAmount?: number;
      supplements?: (components["schemas"]["GetWorkItemOperationPreviewSupplementRequest"])[] | null;
    };
    GetWorkItemOperationPreviewSupplementRequest: {
      /** Format: uuid */
      supplementId?: string;
    };
    GetWorkItemsQueryResponse: {
      /** Format: uuid */
      projectId?: string;
      /** Format: uuid */
      projectFolderId?: string;
      workItems?: (components["schemas"]["WorkItemResponse"])[] | null;
    };
    GroupedWorkItemsResponse: {
      id?: string | null;
      text?: string | null;
      /** Format: double */
      amount?: number;
      /** Format: double */
      paymentDkr?: number;
    };
    /** @enum {string} */
    Lock: "Locked" | "Unlocked";
    LogBookSalaryAdvanceResponse: {
      start?: components["schemas"]["LogBookSalaryAdvanceTimeResponse"];
      end?: components["schemas"]["LogBookSalaryAdvanceTimeResponse"];
      /** Format: double */
      amount?: number;
      role?: components["schemas"]["LogBookSalaryAdvanceRoleResponse"];
    };
    /** @enum {string} */
    LogBookSalaryAdvanceRoleRequest: "Participant" | "Apprentice";
    /** @enum {string} */
    LogBookSalaryAdvanceRoleResponse: "Participant" | "Apprentice" | "Undefined";
    LogBookSalaryAdvanceTimeResponse: {
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      week?: number;
    };
    LogBookTimeResponse: {
      /** Format: int32 */
      hours?: number;
      /** Format: int32 */
      minutes?: number;
    };
    LogBookUserResponse: {
      name?: string | null;
      /** Format: uuid */
      userId?: string;
    };
    MaterialMountingResponse: {
      /** Format: int32 */
      mountingCode?: number;
      text?: string | null;
      /** Format: double */
      operationTimeMilliseconds?: number;
      supplementOperations?: (components["schemas"]["SupplementOperationResponse"])[] | null;
    };
    MaterialSupplementOperationRequest: {
      /** Format: uuid */
      supplementOperationId?: string;
      /** Format: double */
      amount?: number;
    };
    MaterialSupplementRequest: {
      /** Format: uuid */
      supplementId?: string;
    };
    MoveProjectFolderRequest: {
      /**
       * Format: uuid 
       * @description The source folder to move.
       */
      folderId?: string;
      /**
       * Format: uuid 
       * @description The destination folder, use '11111111-1111-1111-1111-111111111111' for root folder.
       */
      destinationFolderId?: string;
    };
    MoveWorkItemsRequest: {
      /**
       * Format: uuid 
       * @description The destination folder, use '11111111-1111-1111-1111-111111111111' for root folder.
       */
      destinationFolderId?: string;
      /** @description The list of work items that are to be moved */
      workItemIds?: (string)[] | null;
    };
    OpenProjectLogBookWeekRequest: {
      /** Format: uuid */
      userId?: string;
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      week?: number;
    };
    OperationSupplementRequest: {
      /** Format: uuid */
      supplementId?: string;
    };
    /** @enum {string} */
    PieceworkType: "TwelveOneA" | "TwelveOneB" | "TwelveOneC" | "TwelveTwo";
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      [key: string]: unknown;
    };
    ProjectCompensationParticipant: {
      /** Format: uuid */
      compensationParticipantId?: string;
      participantName?: string | null;
      participantEmail?: string | null;
      /** Format: double */
      closedHoursInPeriod?: number;
      /** Format: double */
      compensationAmountDkr?: number;
    };
    /** @enum {string} */
    ProjectFolderLock: "Locked" | "Unlocked";
    ProjectFolderResponse: {
      /** Format: uuid */
      projectFolderId?: string;
      projectFolderName?: string | null;
      projectFolderDescription?: string | null;
      createdBy?: string | null;
      /** Format: date-time */
      createdTime?: string;
      subFolders?: (components["schemas"]["ProjectFolderResponse"])[] | null;
      documents?: (components["schemas"]["DocumentReferenceResponse"])[] | null;
      projectFolderLocked?: components["schemas"]["ProjectFolderLock"];
      folderExtraWork?: components["schemas"]["ExtraWork"];
      baseRateAndSupplements?: components["schemas"]["BaseRateAndSupplementsResponse"];
      folderSupplements?: (components["schemas"]["FolderSupplementResponse"])[] | null;
    };
    ProjectParticipant: {
      /** Format: uuid */
      userId?: string;
      name?: string | null;
    };
    ProjectResponse: {
      /** Format: uuid */
      projectId?: string;
      projectName?: string | null;
      description?: string | null;
      pieceworkType?: components["schemas"]["PieceworkType"];
    };
    /** @enum {string} */
    ProjectRole: "ProjectManager" | "ProjectOwner" | "ProjectParticipant" | "Undefined";
    ProjectUserResponse: {
      /** Format: uuid */
      id?: string;
      name?: string | null;
      role?: components["schemas"]["ProjectUserRole"];
      email?: string | null;
      phone?: string | null;
      address?: string | null;
    };
    /** @enum {string} */
    ProjectUserRole: "Owner" | "Participant" | "Manager";
    RegisterCompensationRequest: {
      /** Format: double */
      compensationPayment?: number;
      compensationStartDate?: string;
      compensationEndDate?: string;
      compensationParticipantIds?: (string)[] | null;
    };
    RegisterLogbookSalaryAdvanceRequest: {
      /** Format: uuid */
      userId?: string;
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      week?: number;
      type?: components["schemas"]["LogBookSalaryAdvanceRoleRequest"];
      /** Format: double */
      amount?: number;
    };
    RegisterProjectCatalogFavoriteRequest: {
      /** Format: uuid */
      catalogId?: string;
      catalogType?: components["schemas"]["FavoriteCatalogType"];
    };
    RegisterProjectLogBookDay: {
      /** Format: date-time */
      date?: string;
      /** Format: int32 */
      hours?: number;
      /** Format: int32 */
      minutes?: number;
    };
    RegisterProjectLogBookWeekRequest: {
      /** Format: uuid */
      userId?: string;
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      week?: number;
      note?: string | null;
      days?: (components["schemas"]["RegisterProjectLogBookDay"])[] | null;
    };
    RegisterProjectSpecificOperationRequest: {
      extraWorkAgreementNumber?: string | null;
      name?: string | null;
      description?: string | null;
      /** Format: double */
      operationTimeMs?: number;
      /** Format: double */
      workingTimeMs?: number;
    };
    RegisterProjectUserRequest: {
      name?: string | null;
      role?: components["schemas"]["UserRole"];
      email?: string | null;
      address?: string | null;
      phone?: string | null;
    };
    RegisterWorkItemMaterialRequest: {
      /** Format: uuid */
      materialId?: string;
      /** Format: double */
      workItemAmount?: number;
      /** Format: int32 */
      workItemMountingCode?: number;
      supplementOperations?: (components["schemas"]["MaterialSupplementOperationRequest"])[] | null;
      supplements?: (components["schemas"]["MaterialSupplementRequest"])[] | null;
    };
    RegisterWorkItemOperationRequest: {
      /** Format: uuid */
      operationId?: string;
      /** Format: double */
      workItemAmount?: number;
      supplements?: (components["schemas"]["OperationSupplementRequest"])[] | null;
    };
    RemoveCompensationPaymentsRequest: {
      compensationPaymentIds?: (string)[] | null;
    };
    RemoveExtraWorkAgreementRequest: {
      extraWorkAgreementIds?: (string)[] | null;
    };
    RemoveProjectFavoritesRequest: {
      favoriteIds?: (string)[] | null;
    };
    RemoveProjectSpecificOperationsRequest: {
      projectSpecificOperationIds?: (string)[] | null;
    };
    RemoveWorkItemRequest: {
      workItemIds?: (string)[] | null;
    };
    SearchMaterialResponse: {
      foundMaterials?: (components["schemas"]["FoundMaterial"])[] | null;
    };
    SearchMaterialsRequest: {
      searchString?: string | null;
      /** Format: int32 */
      maxHits?: number;
    };
    SearchOperationResponse: {
      foundOperations?: (components["schemas"]["FoundOperation"])[] | null;
    };
    SearchOperationsRequest: {
      searchString?: string | null;
      /** Format: int32 */
      maxHits?: number;
    };
    SupplementOperationResponse: {
      /** Format: uuid */
      supplementOperationId?: string;
      text?: string | null;
      type?: components["schemas"]["SupplementOperationType"];
      /** Format: double */
      operationTimeMilliseconds?: number;
    };
    /** @enum {string} */
    SupplementOperationType: "AmountRelated" | "UnitRelated";
    SupplementResponse: {
      /** Format: uuid */
      supplementId?: string;
      supplementNumber?: string | null;
      supplementText?: string | null;
      /** Format: double */
      supplementPercentage?: number;
    };
    UpdateBaseRateRequest: {
      baseRateRegulationPercentage?: components["schemas"]["BaseRateUpdate"];
    };
    UpdateBaseSupplementsRequest: {
      indirectTimePercentage?: components["schemas"]["BaseSupplementUpdate"];
      siteSpecificTimePercentage?: components["schemas"]["BaseSupplementUpdate"];
    };
    UpdateExtraWorkAgreementRatesRequest: {
      /** Format: double */
      customerRatePrHour?: number;
      /** Format: double */
      companyRatePrHour?: number;
    };
    /** @enum {string} */
    UpdateExtraWorkAgreementType: "CustomerHours" | "CompanyHours" | "AgreedPayment" | "Other";
    UpdateExtraWorkAgreementWorkTime: {
      /** Format: int32 */
      hours?: number;
      /** Format: int32 */
      minutes?: number;
    };
    UpdateFolderSupplementsRequest: {
      folderSupplements?: (string)[] | null;
    };
    UpdateLockProjectFolderRequest: {
      folderLock?: components["schemas"]["Lock"];
      recursive?: boolean;
    };
    UpdateProjectCompanyRequest: {
      company?: string | null;
      workplaceAdr?: string | null;
      cvrNumber?: string | null;
      pNumber?: string | null;
    };
    UpdateProjectExtraWorkAgreementsRequest: {
      extraWorkAgreementNumber?: string | null;
      name?: string | null;
      description?: string | null;
      extraWorkAgreementType?: components["schemas"]["UpdateExtraWorkAgreementType"];
      /** Format: double */
      paymentDkr?: number | null;
      workTime?: components["schemas"]["UpdateExtraWorkAgreementWorkTime"];
    };
    UpdateProjectFolderDescriptionRequest: {
      projectFolderDescription?: string | null;
    };
    UpdateProjectFolderExtraWorkRequest: {
      folderExtraWorkUpdate?: components["schemas"]["ExtraWorkUpdate"];
    };
    UpdateProjectFolderNameRequest: {
      projectFolderName?: string | null;
    };
    UpdateProjectInformationRequest: {
      name?: string | null;
      description?: string | null;
      orderNumber?: string | null;
      pieceworkNumber?: string | null;
    };
    UpdateProjectLumpSumRequest: {
      /** Format: double */
      lumpSumDkr?: number;
    };
    /** @enum {string} */
    UpdateProjectPieceworkType: "TwelveOneA" | "TwelveOneB" | "TwelveOneC" | "TwelveTwo";
    UpdateProjectSpecificOperationRequest: {
      extraWorkAgreementNumber?: string | null;
      name?: string | null;
      description?: string | null;
      /** Format: double */
      operationTimeMs?: number;
      /** Format: double */
      workingTimeMs?: number;
    };
    UpdateProjectTypeRequest: {
      pieceworkType?: components["schemas"]["UpdateProjectPieceworkType"];
      /** Format: double */
      pieceWorkSum?: number | null;
      startDate?: string | null;
      endDate?: string | null;
    };
    UpdateWorkItemRequest: {
      /** Format: double */
      workItemAmount?: number;
    };
    /** @enum {string} */
    UserRole: "ProjectManager" | "ProjectParticipant";
    ValidationError: {
      type?: string | null;
      title?: string | null;
      detail?: string | null;
      instance?: string | null;
      /** Format: int32 */
      status?: number;
      traceId?: string | null;
      errors?: readonly (components["schemas"]["ErrorDetail"])[] | null;
    };
    WorkItemMaterialResponse: {
      workItemEanNumber?: string | null;
      /** Format: int32 */
      workItemMountingCode?: number;
      workItemMountingCodeText?: string | null;
      supplementOperations?: (components["schemas"]["WorkItemSupplementOperationResponse"])[] | null;
    };
    WorkItemOperationResponse: {
      operationNumber?: string | null;
    };
    WorkItemResponse: {
      /** Format: uuid */
      workItemId?: string;
      workItemText?: string | null;
      workItemDate?: string;
      /** Format: double */
      workItemAmount?: number;
      /** Format: double */
      workItemOperationTimeMilliseconds?: number;
      /** Format: double */
      workItemTotalOperationTimeMilliseconds?: number;
      /** Format: double */
      workItemTotalPaymentDkr?: number;
      supplements?: (components["schemas"]["WorkItemSupplementResponse"])[] | null;
      workItemType?: components["schemas"]["WorkItemType"];
      workItemMaterial?: components["schemas"]["WorkItemMaterialResponse"];
      workItemOperation?: components["schemas"]["WorkItemOperationResponse"];
    };
    WorkItemSupplementOperationResponse: {
      /** Format: uuid */
      supplementOperationId?: string;
      text?: string | null;
      operationType?: components["schemas"]["WorkItemSupplementOperationType"];
      /** Format: double */
      operationTimeMilliseconds?: number;
      /** Format: double */
      amount?: number;
    };
    /** @enum {string} */
    WorkItemSupplementOperationType: "AmountRelated" | "UnitRelated";
    WorkItemSupplementResponse: {
      /** Format: uuid */
      supplementId?: string;
      supplementNumber?: string | null;
      supplementText?: string | null;
    };
    /** @enum {string} */
    WorkItemType: "Material" | "Operation";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
